#1. Creating sets
board_of_directors = {'Benny', 'Hans', 'Tine', 'Mille', 'Torben', 'Troels', 'Søren'}
management = {'Tine', 'Trunte', 'Rane'}
employees = {'Niels', 'Anna', 'Tine', 'Ole', 'Trunte', 'Bent', 'Rane', 'Allan', 'Stine', 'Claus', 'James', 'Lars'}

#who in the board of directors is not an employee?
not_employees = board_of_directors - employees
print("Members of the board of directors who are not employees:", not_employees)

#who in the board of directors is also an employee?
board_and_employees = board_of_directors.intersection(employees)
print(board_and_employees)


#how many of the management is also member of the board?
management_and_board = management.intersection(board_of_directors)
print("Number of members of the management who are also members of the board:", len(management_and_board))

#All members of the management also an employee
if management.issubset(employees):
    print("All members of the management are also employees.")
else:
    print("Not all members of the management are also employees.")

#All members of the management also in the board?
if management.issubset(board_of_directors):
    print("All members of the management are also members of the board.")
else:
    print("Not all members of the management are also members of the board.")

#Who is an employee, member of the management, and a member of the board?
employee_management_board = employees.intersection(management).intersection(board_of_directors)
print("Employees who are also members of the management and the board: ", employee_management_board)

#Who of the employee is neither a member or the board or management?
not_board_or_management = employees.difference(board_of_directors).difference(management)
print("Employees who are not members of the board or management:", not_board_or_management)


#2. Datastructure
data = {'a': 'Alpha', 'b': 'Beta', 'g': 'Gamma'}

# create a list of tuples using a list comprehension
result = [(key, value) for key, value in data.items()]

print(result)


#From these 2 sets:
# Using the union() method
union_set = set1.union(set2)
print(union_set)

set1 = {'a', 'e', 'i', 'o', 'u', 'y'}
set2 = {'a', 'e', 'i', 'o', 'u', 'y', 'æ', 'ø', 'å'}

# Union
union = set1.union(set2)
print("Union:", union)

# Symmetric Difference
sym_diff = set1.symmetric_difference(set2)
print("Symmetric Difference:", sym_diff)

# Difference
diff1 = set1.difference(set2)
print("Difference of set1 from set2:", diff1)

diff2 = set2.difference(set1)
print("Difference of set2 from set1:", diff2)

# Disjoint
disjoint = set1.isdisjoint(set2)
print("Are the sets disjoint?", disjoint)




#4. Decode date
def decode_date(date_str):
    month_dict = {
        'JAN': '01', 'FEB': '02', 'MAR': '03', 'APR': '04',
        'MAY': '05', 'JUN': '06', 'JUL': '07', 'AUG': '08',
        'SEP': '09', 'OCT': '10', 'NOV': '11', 'DEC': '12'
    }
    day, month_str, year = date_str.split('-')
    month = month_dict[month_str.upper()]

    if int(year) < 30:
        year = '20' + year
    else:
        year = '19' + year
    return (int(year), int(month), int(day))
print(decode_date('23-FEB-23'))



#Detailed with comments

def decode_date(date_str):
    # Create a dictionary to decode month names to numbers
    month_dict = {
        'JAN': '01', 'FEB': '02', 'MAR': '03', 'APR': '04',
        'MAY': '05', 'JUN': '06', 'JUL': '07', 'AUG': '08',
        'SEP': '09', 'OCT': '10', 'NOV': '11', 'DEC': '12'
    }

    # Split the date into day, month, and year
    day, month, year = date_str.split('-')

    # Correct the year to include all of the digits
    if int(year) < 50:
        year = '20' + year
    else:
        year = '19' + year

    # Translate the month abbreviation to a number
    month_num = month_dict[month]

    # Return the year, month, and day as a tuple
    return year, month_num, day


#e.g
date_str = '23-MAR-22'
y, m, d = decode_date(date_str)
print(y, m, d)